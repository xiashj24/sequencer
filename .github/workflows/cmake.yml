name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-15, windows-latest]
        build_type: [Release]

    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - name: List Xcode installations
      if: matrix.os == 'macos-15'
      run: sudo ls -1 /Applications | grep "Xcode"
    - name: Select Xcode 16
      if: matrix.os == 'macos-15'
      run: sudo xcode-select -s /Applications/Xcode_16.app/Contents/Developer
    - uses: actions/checkout@v4

    - name: Cache dependencies
      id: cache-libs
      uses: actions/cache@v4
      with:
        path: ${{github.workspace}}
        key: libs

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S . -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.build_type }}

    - name: Package Build Artifacts
      run: |
        mkdir -p ${{github.workspace}}/artifacts
        cp -r ${{github.workspace}}/build/plugin/AudioPlugin_artefacts/${{matrix.build_type}}/*  ${{ github.workspace }}/artifacts/

    - name: Add Remove Quarantine Script
      if: matrix.os == 'macos-15'
      run: |
          SCRIPT_NAME="${{github.workspace}}/artifacts/remove_quarantine.command"
          echo '#!/bin/bash' > $SCRIPT_NAME
          echo 'xattr -r -d com.apple.quarantine ./' >> $SCRIPT_NAME
          chmod +x $SCRIPT_NAME

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{matrix.os}}-${{ matrix.build_type }}
        path: ${{github.workspace}}/artifacts
        retention-days: 30