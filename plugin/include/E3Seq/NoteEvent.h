#pragma once
#include "E3Seq/Step.h"
#include "E3Seq/Track.h"

namespace Sequencer {

// keep track of a note's life-time
// this is primarily for voice stealing while overdubbing
// we need to steal the notes that are least perceivable by the user
enum class NoteState { ToBeTriggered, Playing, ToBeReleased, Released };


// super important idea:
// the voiceBuffer should be managed by the outside application
// but passed into the sequencer for processing
// noteOn and noteOff are generated by the sequencer, so they should be implemented as a callback
// the outside frameworks merely register these callbacks

enum class NoteSource { Sequencer, Keyboard, Arpeggiator };

struct NoteEvenNew {
  NoteSource source;
  NoteState state;
  double noteOnTime; // since when the sequencer was last started
};

struct NoteEvent {
  bool enabled;
  int note;
  int velocity;
  int channel;
  double time_since_last_tick;

  NoteEvent()
      : enabled(false),
        note(DEFAULT_NOTE),
        velocity(DEFAULT_VELOCITY),
        channel(1),
        time_since_last_tick(0.0) {}

  NoteEvent(Step step)
      : enabled(true),
        note(step.note),
        velocity(step.velocity),
        channel(1),
        time_since_last_tick(0.0) {}

  NoteEvent(Track track, Step step)
      : enabled(true),
        note(step.note),
        velocity(step.velocity),
        channel(track.getChannel()),
        time_since_last_tick(0.0) {}
};

}  // namespace Sequencer